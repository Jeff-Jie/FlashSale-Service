// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seckill.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_seckill_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_seckill_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_seckill_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_seckill_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_seckill_2eproto;
namespace seckill {
class SeckillRequest;
class SeckillRequestDefaultTypeInternal;
extern SeckillRequestDefaultTypeInternal _SeckillRequest_default_instance_;
class SeckillResponse;
class SeckillResponseDefaultTypeInternal;
extern SeckillResponseDefaultTypeInternal _SeckillResponse_default_instance_;
}  // namespace seckill
PROTOBUF_NAMESPACE_OPEN
template<> ::seckill::SeckillRequest* Arena::CreateMaybeMessage<::seckill::SeckillRequest>(Arena*);
template<> ::seckill::SeckillResponse* Arena::CreateMaybeMessage<::seckill::SeckillResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace seckill {

// ===================================================================

class SeckillRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seckill.SeckillRequest) */ {
 public:
  SeckillRequest();
  virtual ~SeckillRequest();

  SeckillRequest(const SeckillRequest& from);
  SeckillRequest(SeckillRequest&& from) noexcept
    : SeckillRequest() {
    *this = ::std::move(from);
  }

  inline SeckillRequest& operator=(const SeckillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeckillRequest& operator=(SeckillRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeckillRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeckillRequest* internal_default_instance() {
    return reinterpret_cast<const SeckillRequest*>(
               &_SeckillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SeckillRequest* other);
  friend void swap(SeckillRequest& a, SeckillRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeckillRequest* New() const final {
    return CreateMaybeMessage<SeckillRequest>(nullptr);
  }

  SeckillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeckillRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeckillRequest& from);
  void MergeFrom(const SeckillRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeckillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seckill.SeckillRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_seckill_2eproto);
    return ::descriptor_table_seckill_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usrname = 1;
  void clear_usrname();
  static const int kUsrnameFieldNumber = 1;
  const std::string& usrname() const;
  void set_usrname(const std::string& value);
  void set_usrname(std::string&& value);
  void set_usrname(const char* value);
  void set_usrname(const char* value, size_t size);
  std::string* mutable_usrname();
  std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);

  // string usrkey = 2;
  void clear_usrkey();
  static const int kUsrkeyFieldNumber = 2;
  const std::string& usrkey() const;
  void set_usrkey(const std::string& value);
  void set_usrkey(std::string&& value);
  void set_usrkey(const char* value);
  void set_usrkey(const char* value, size_t size);
  std::string* mutable_usrkey();
  std::string* release_usrkey();
  void set_allocated_usrkey(std::string* usrkey);

  // @@protoc_insertion_point(class_scope:seckill.SeckillRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_seckill_2eproto;
};
// -------------------------------------------------------------------

class SeckillResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seckill.SeckillResponse) */ {
 public:
  SeckillResponse();
  virtual ~SeckillResponse();

  SeckillResponse(const SeckillResponse& from);
  SeckillResponse(SeckillResponse&& from) noexcept
    : SeckillResponse() {
    *this = ::std::move(from);
  }

  inline SeckillResponse& operator=(const SeckillResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeckillResponse& operator=(SeckillResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeckillResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeckillResponse* internal_default_instance() {
    return reinterpret_cast<const SeckillResponse*>(
               &_SeckillResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SeckillResponse* other);
  friend void swap(SeckillResponse& a, SeckillResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeckillResponse* New() const final {
    return CreateMaybeMessage<SeckillResponse>(nullptr);
  }

  SeckillResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeckillResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeckillResponse& from);
  void MergeFrom(const SeckillResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeckillResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seckill.SeckillResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_seckill_2eproto);
    return ::descriptor_table_seckill_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // @@protoc_insertion_point(class_scope:seckill.SeckillResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_seckill_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SeckillRequest

// string usrname = 1;
inline void SeckillRequest::clear_usrname() {
  usrname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeckillRequest::usrname() const {
  // @@protoc_insertion_point(field_get:seckill.SeckillRequest.usrname)
  return usrname_.GetNoArena();
}
inline void SeckillRequest::set_usrname(const std::string& value) {
  
  usrname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seckill.SeckillRequest.usrname)
}
inline void SeckillRequest::set_usrname(std::string&& value) {
  
  usrname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:seckill.SeckillRequest.usrname)
}
inline void SeckillRequest::set_usrname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usrname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seckill.SeckillRequest.usrname)
}
inline void SeckillRequest::set_usrname(const char* value, size_t size) {
  
  usrname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seckill.SeckillRequest.usrname)
}
inline std::string* SeckillRequest::mutable_usrname() {
  
  // @@protoc_insertion_point(field_mutable:seckill.SeckillRequest.usrname)
  return usrname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeckillRequest::release_usrname() {
  // @@protoc_insertion_point(field_release:seckill.SeckillRequest.usrname)
  
  return usrname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeckillRequest::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  usrname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usrname);
  // @@protoc_insertion_point(field_set_allocated:seckill.SeckillRequest.usrname)
}

// string usrkey = 2;
inline void SeckillRequest::clear_usrkey() {
  usrkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeckillRequest::usrkey() const {
  // @@protoc_insertion_point(field_get:seckill.SeckillRequest.usrkey)
  return usrkey_.GetNoArena();
}
inline void SeckillRequest::set_usrkey(const std::string& value) {
  
  usrkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seckill.SeckillRequest.usrkey)
}
inline void SeckillRequest::set_usrkey(std::string&& value) {
  
  usrkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:seckill.SeckillRequest.usrkey)
}
inline void SeckillRequest::set_usrkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usrkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seckill.SeckillRequest.usrkey)
}
inline void SeckillRequest::set_usrkey(const char* value, size_t size) {
  
  usrkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seckill.SeckillRequest.usrkey)
}
inline std::string* SeckillRequest::mutable_usrkey() {
  
  // @@protoc_insertion_point(field_mutable:seckill.SeckillRequest.usrkey)
  return usrkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeckillRequest::release_usrkey() {
  // @@protoc_insertion_point(field_release:seckill.SeckillRequest.usrkey)
  
  return usrkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeckillRequest::set_allocated_usrkey(std::string* usrkey) {
  if (usrkey != nullptr) {
    
  } else {
    
  }
  usrkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usrkey);
  // @@protoc_insertion_point(field_set_allocated:seckill.SeckillRequest.usrkey)
}

// -------------------------------------------------------------------

// SeckillResponse

// string result = 1;
inline void SeckillResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SeckillResponse::result() const {
  // @@protoc_insertion_point(field_get:seckill.SeckillResponse.result)
  return result_.GetNoArena();
}
inline void SeckillResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seckill.SeckillResponse.result)
}
inline void SeckillResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:seckill.SeckillResponse.result)
}
inline void SeckillResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seckill.SeckillResponse.result)
}
inline void SeckillResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seckill.SeckillResponse.result)
}
inline std::string* SeckillResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:seckill.SeckillResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SeckillResponse::release_result() {
  // @@protoc_insertion_point(field_release:seckill.SeckillResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SeckillResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:seckill.SeckillResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace seckill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_seckill_2eproto
